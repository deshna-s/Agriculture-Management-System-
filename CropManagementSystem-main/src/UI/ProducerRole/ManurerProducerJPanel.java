
package UI.ProducerRole;


import Model.EcoSys;
import Model.Enterprise.Enterprise;
import Model.Enterprise.ProducerEnt;
import Model.Organization.*;
import Model.PrimaryItem.PrimaryItem;
import Model.PrimaryItem.PrimaryItemsDir;
import Model.UserAccount.UserAccount;
import Model.WorkQueue.*;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @Author Deshna, Dhir, Prasad, Anisha
 */
public class ManurerProducerJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private OrgProduction organization;
    private ProducerEnt enterprise;
    private UserAccount userAccount;
    private PrimaryItemsDir piDir;
           
      /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
    private EcoSys business;

    public ManurerProducerJPanel(JPanel userProcessContainer, UserAccount account, OrgProduction organization, Enterprise enterprise,EcoSys business, PrimaryItemsDir rmDirectory) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = (ProducerEnt)enterprise;
        this.userAccount = account;
        this.business = business;
        this.piDir = rmDirectory;
        valLbl.setText(enterprise.getName());
        populateSuppRequestTable();
        populateRMTable();
        
    }
   /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/

    public void populateSuppRequestTable(){
    DefaultTableModel model = (DefaultTableModel)wrkReqPIJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            
               /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
            
            row[0] = request;
            row[1] = request.getSender().getEmp().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmp().getName();
            row[3] = request.getStatus();
            
            model.addRow(row);
        }
    }
    
       /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valLbl = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        wrkReqPIJTable = new javax.swing.JTable();
        jLabel11212 = new javax.swing.JLabel();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        piNameTxt = new javax.swing.JTextField();
        jLabel377 = new javax.swing.JLabel();
        qtyText = new javax.swing.JTextField();
        addCultivateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        piJTable = new javax.swing.JTable();
        jLabel421 = new javax.swing.JLabel();
        jLabel532 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enterpriseLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        enterpriseLabel.setText("Enterprise");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 127, 30));

        valLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add(valLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 80, 158, 26));

        wrkReqPIJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        wrkReqPIJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane22.setViewportView(wrkReqPIJTable);

        add(jScrollPane22, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 637, 96));

        jLabel11212.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel11212.setText("Raw Material Requests");
        add(jLabel11212, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 240, -1, -1));

        processJButton.setBackground(new java.awt.Color(255, 102, 102));
        processJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 380, 150, -1));

        assignJButton.setBackground(new java.awt.Color(255, 102, 102));
        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 380, 150, -1));

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel23.setText("Raw Material");
        add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 640, 120, -1));

        piNameTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(piNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 640, 200, -1));

        jLabel377.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel377.setText("Quantity");
        add(jLabel377, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 680, 136, 50));

        qtyText.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        qtyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyTextActionPerformed(evt);
            }
        });
        qtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyTextKeyTyped(evt);
            }
        });
        add(qtyText, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 690, 200, -1));

        addCultivateButton.setBackground(new java.awt.Color(255, 102, 102));
        addCultivateButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addCultivateButton.setText("Add raw material");
        addCultivateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCultivateButtonActionPerformed(evt);
            }
        });
        add(addCultivateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 740, -1, -1));

        piJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        piJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw Material", "Quantity", "Producer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(piJTable);
        if (piJTable.getColumnModel().getColumnCount() > 0) {
            piJTable.getColumnModel().getColumn(0).setResizable(false);
            piJTable.getColumnModel().getColumn(1).setResizable(false);
            piJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 480, 637, 130));

        jLabel421.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLabel421.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel421.setText("Producer");
        add(jLabel421, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, 289, 60));

        jLabel532.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel532.setText("Raw Material Produced");
        add(jLabel532, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 450, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UIFarmerRole.jpg"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 930));
    }// </editor-fold>//GEN-END:initComponents

    private void sendToSupplierJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToSupplierJButtonActionPerformed
        int selectedRow = wrkReqPIJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        YieldRequest req = (YieldRequest)wrkReqPIJTable.getValueAt(selectedRow, 0);
        req.setStatus("Forwarded to Manufacturer.Supplier");
        populateSuppRequestTable();
        userAccount.getWorkQueue().getWorkRequestList().add(req);
        
        Organization org = null;
        for (Organization org1 : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (org1 instanceof OrgProducerDistributor){
                org = org1;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(req);
        }
        
    }//GEN-LAST:event_sendToSupplierJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int slctRow = wrkReqPIJTable.getSelectedRow();

        if (slctRow < 0){
            return;
        }

        YieldRequest request = (YieldRequest)wrkReqPIJTable.getValueAt(slctRow, 0);

        request.setStatus("Under Process");

        ProcessYieldReqPrimaryItemJPanel processWorkRequestJPanel = new ProcessYieldReqPrimaryItemJPanel(userProcessContainer, request);
        userProcessContainer.add("ProcessProduceRequestRMJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = wrkReqPIJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Kindly select a record");
        }

        WorkRequest request = (WorkRequest)wrkReqPIJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateSuppRequestTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void addCultivateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCultivateButtonActionPerformed
      try 
        {
        if(qtyText.getText().equals("") || piNameTxt.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Kindly fill all details");
         else if (checkIfRMExists(piNameTxt.getText()))
        {
            PrimaryItem pi =  piDir.addPrimItem();
            pi.setItemName(piNameTxt.getText());
            pi.setItemQty(Integer.parseInt(qtyText.getText()));
           
            pi.setMakerName(userAccount.getuName());
            populateRMTable();
        }
        else {
             String temp1_Name = null;   
             int cultivateQty = Integer.parseInt(qtyText.getText());
             int i = 0;
             String cultivateName = piNameTxt.getText();
             for(int j = 0; j <piJTable.getRowCount(); j++){
             temp1_Name = piJTable.getModel().getValueAt(j, i).toString();
             
             if(temp1_Name.equalsIgnoreCase(cultivateName)){
                i++;
               
                cultivateQty = Integer.parseInt((String.valueOf(piJTable.getModel().getValueAt(j, i)))) + cultivateQty;
                 System.out.println("New quantity" +cultivateQty);
                
                for (PrimaryItem pi : piDir.getPrimItem())
                {
                    if (pi.getItemName().equalsIgnoreCase(cultivateName))
                     pi.setItemQty(cultivateQty);
                }
                break;
            }
        }
             populateRMTable();
            }
        }
        catch(NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null,"Kindly enter a number in Quantity and Price");
            }
        qtyText.setText("");
        piNameTxt.setText("");
    }//GEN-LAST:event_addCultivateButtonActionPerformed

    private void qtyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyTextActionPerformed
         
    }//GEN-LAST:event_qtyTextActionPerformed

    private void qtyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextKeyTyped
        char vchar = evt.getKeyChar();
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE)){
        getToolkit().beep();
        evt.consume();
        }
    }//GEN-LAST:event_qtyTextKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCultivateButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11212;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel377;
    private javax.swing.JLabel jLabel421;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JTable piJTable;
    private javax.swing.JTextField piNameTxt;
    private javax.swing.JButton processJButton;
    private javax.swing.JTextField qtyText;
    private javax.swing.JLabel valLbl;
    private javax.swing.JTable wrkReqPIJTable;
    // End of variables declaration//GEN-END:variables

    private boolean checkIfRMExists(String text) {
        boolean flag = true;
        for (PrimaryItem rm: piDir.getPrimItem()){
            String temp = rm.getItemName();
            if(temp == null)
            {   
                break;
            }
            else if (temp.equalsIgnoreCase(text))
            {
                flag = false;
                break;
            }
                else
                flag = true;
        } 
        
        return flag;
    }

    private void populateRMTable() {
         DefaultTableModel model = (DefaultTableModel)piJTable.getModel();
        
        model.setRowCount(0);
        
        for(PrimaryItem rm : piDir.getPrimItem()){
            Object[] row = new Object[4];
            row[0] = rm;
            row[1] = rm.getItemQty();
            row[2] = rm.getMakerName();
             model.addRow(row);
        }
    }
}
