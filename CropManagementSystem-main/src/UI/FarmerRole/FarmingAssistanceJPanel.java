
package UI.FarmerRole;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @Author Deshna, Dhir, Prasad, Anisha
 */
public class FarmingAssistanceJPanel extends javax.swing.JPanel {



    public static Map<String, Object> jsonToMap(String str){
     Map<String, Object> map = new Gson().fromJson(str, new TypeToken<HashMap<String, Object>>() {}.getType()
     );
     return map;
    }
    private JPanel userProcessContainer;
    public FarmingAssistanceJPanel(JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        populateCombo();
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLlb4 = new javax.swing.JLabel();
        jLbl5 = new javax.swing.JLabel();
        jLbl6 = new javax.swing.JLabel();
        tomoPlusOne_ClimTxt = new javax.swing.JTextField();
        tomo_ClimTxt = new javax.swing.JTextField();
        now_ClimTxt = new javax.swing.JTextField();
        jLbl1 = new javax.swing.JLabel();
        jLbl2 = new javax.swing.JLabel();
        jLbl3 = new javax.swing.JLabel();
        chkClimate = new javax.swing.JButton();
        positionTextBox = new javax.swing.JTextField();
        piComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        Notes = new javax.swing.JTextArea();
        back = new javax.swing.JButton();
        todayMax = new javax.swing.JTextField();
        tomorrowMax = new javax.swing.JTextField();
        tomoPlusOneMax = new javax.swing.JTextField();
        jLbl7 = new javax.swing.JLabel();
        jLbl28 = new javax.swing.JLabel();
        jLbl39 = new javax.swing.JLabel();
        jLbl10 = new javax.swing.JLabel();
        jLbl11 = new javax.swing.JLabel();
        jLbl13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLlb4.setBackground(new java.awt.Color(0, 0, 0));
        jLlb4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLlb4.setText("Current Day");
        jLlb4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 51)));
        add(jLlb4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 400, -1, -1));

        jLbl5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl5.setText("Tomorrow");
        jLbl5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));
        add(jLbl5, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 400, -1, -1));

        jLbl6.setBackground(new java.awt.Color(255, 0, 0));
        jLbl6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl6.setText("Day After");
        jLbl6.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));
        add(jLbl6, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 400, -1, -1));

        tomoPlusOne_ClimTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(tomoPlusOne_ClimTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 320, 110, -1));

        tomo_ClimTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(tomo_ClimTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 320, 110, -1));

        now_ClimTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        now_ClimTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                now_ClimTxtActionPerformed(evt);
            }
        });
        add(now_ClimTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 320, 110, -1));

        jLbl1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jLbl1ComponentHidden(evt);
            }
        });
        add(jLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 170, 159));
        add(jLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 170, 150));
        add(jLbl3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, 170, 150));

        chkClimate.setBackground(new java.awt.Color(255, 102, 102));
        chkClimate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        chkClimate.setText("Request Weather");
        chkClimate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkClimateActionPerformed(evt);
            }
        });
        add(chkClimate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 590, 290, -1));

        positionTextBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(positionTextBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 540, 110, -1));

        piComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        piComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piComboBoxActionPerformed(evt);
            }
        });
        add(piComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 540, 170, 30));

        Notes.setColumns(20);
        Notes.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Notes.setRows(5);
        Notes.setEnabled(false);
        jScrollPane1.setViewportView(Notes);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 550, 450, 70));

        back.setBackground(new java.awt.Color(255, 102, 102));
        back.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 610, 100, 40));

        todayMax.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(todayMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 360, 110, -1));

        tomorrowMax.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tomorrowMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomorrowMaxActionPerformed(evt);
            }
        });
        add(tomorrowMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 360, 110, -1));

        tomoPlusOneMax.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(tomoPlusOneMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 360, 110, -1));

        jLbl7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl7.setText("Low");
        add(jLbl7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 320, -1, -1));

        jLbl28.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl28.setText("High");
        add(jLbl28, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 360, -1, -1));

        jLbl39.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl39.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLbl39.setText("Advisory");
        jLbl39.setToolTipText("");
        add(jLbl39, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 520, 100, -1));

        jLbl10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl10.setText("Select Fruit");
        add(jLbl10, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 120, 20));

        jLbl11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLbl11.setText("Place");
        add(jLbl11, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 510, 110, -1));

        jLbl13.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLbl13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbl13.setText("Farming Assistance");
        jLbl13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLbl13, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 30, 290, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UIFarmerRole.jpg"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -6, 1000, 670));

        jTextField2.setText("jTextField2");
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 510, -1, -1));

        jLabel2.setBackground(new java.awt.Color(51, 255, 102));
        jLabel2.setText("Hello");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, -1, -1));

        jLabel3.setText("jLabel3");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 280, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void now_ClimTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_now_ClimTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_now_ClimTxtActionPerformed

    private void chkClimateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkClimateActionPerformed
        // TODO add your handling code here:
    if (positionTextBox.getText().equals("")){
        JOptionPane.showMessageDialog(null,"Kindly enter a place to check Climate Forecast");
    }
    else{
        boolean isMetric = true;
        String place = positionTextBox.getText();
        String apiKeyVal = "a7a00470c6e4c9a97cd76242259a08cf"; 
        String urlString = "http://api.openweathermap.org/data/2.5/weather?q=" + place + "&appid=" + apiKeyVal + "&units=imperial";
        //byte forecastDays = 3;

        try {
            StringBuilder result = new StringBuilder();
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while((line = rd.readLine()) != null) {
                result.append(line);

            }
            
            /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
            rd.close();
            System.out.println(result);
            Map<String, Object> respMap = jsonToMap(result.toString());
            Map<String, Object> mainMap = jsonToMap(respMap.get("main").toString());
            Map<String, Object> windMap = jsonToMap(respMap.get("wind").toString());

            System.out.println("Current Temperature: " +mainMap.get("temp"));
            System.out.println("Current Humidity: " +mainMap.get("humidity"));
            System.out.println("Wind Speeds: " +windMap.get("speed"));
            System.out.println("Wind Angle: " +windMap.get("deg"));

            double num1 = Double.parseDouble((String.valueOf(mainMap.get("temp"))));
            double gust = Double.parseDouble((String.valueOf(windMap.get("speed"))));
            double sweatness = Double.parseDouble((String.valueOf(mainMap.get("humidity"))));
            
            //Finding random number to calculate climate assistance
            Random rnd = new Random();
            double rnd1 = Math.random()*5;
            double rnd2 = Math.random()*7;
            double rnd3 = Math.random()*5;
            
            /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
            
            
            //Calculation
            rnd3 = Math.round(rnd3*100.0)/100.0;
            double maxNum = num1 + rnd3;
            maxNum = Math.round(maxNum*100.0)/100.0;
                    //Finding random number to calculate climate assistance

            double low = num1 - rnd1;
                        //Finding random number to calculate climate assistance

            low = Math.round(low*100.0)/100.0;
            double minNum = low + rnd3;
                        //Finding random number to calculate climate assistance

            minNum = Math.round(minNum*100.0)/100;
            double high  = num1 + rnd2;
                        //Finding random number to calculate climate assistance

            high = Math.round(high*100.0)/100.0;
                        //Finding random number to calculate climate assistance

            double maximumHigh = high + rnd3;
            maximumHigh = Math.round(maximumHigh*100.0)/100.0;
            
            //Finding random number to calculate climate assistanc
            now_ClimTxt.setText(String.valueOf(num1));
            tomo_ClimTxt.setText(String.valueOf(low));
            tomoPlusOne_ClimTxt.setText(String.valueOf(high));
            todayMax.setText(String.valueOf(maxNum));
            tomorrowMax.setText(String.valueOf(minNum));
            tomoPlusOneMax.setText(String.valueOf(maximumHigh));
            
            
            if (num1>59.0 && gust > 0.0 && sweatness <= 19.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsunny.png")).getImage();;
                // GIFL.setImageIcon
                //Cancel above statment
             Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if (num1>59.0 && gust > 0.0 && sweatness > 19.0 && sweatness <= 54.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsuncloud.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
               
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if(num1>59.0 && gust > 2.0 && sweatness > 54.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsunrain.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
               
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if(num1>44.0 && num1<=59.0 && gust > 0.5 && sweatness <= 29.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcloud.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if(num1>44.0 && num1<=59.0 && gust > 2.0 && sweatness > 29.0 && sweatness <= 59.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcloudrain.gif")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if(num1>44.0 && num1<=59.0 && gust > 3.5 && sweatness > 59.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMrain.jpg")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if(num1<=44.0 && num1>29.0 && gust > 0.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcold.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            else if(num1<=29.0 && gust > 0.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMverycold.png")).getImage();;

           // GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
               
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl1.setIcon(imgIcon);
            }
            if (low>59.0 && gust > 0.0 && sweatness <= 19.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsunny.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
               
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
               
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if (low>59.0 && gust > 0.0 && sweatness > 19.0 && sweatness <= 54.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsuncloud.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if(low>59.0 && gust > 2.0 && sweatness > 54.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsunrain.jpg")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if(low>44.0 && low<=59.0 && gust > 0.5 && sweatness <= 29.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcloud.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
               
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if(low>44.0 && low<=59.0 && gust > 2.0 && sweatness > 29.0 && sweatness <= 59.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcloudrain.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if(low>44.0 && low<59.0 && gust > 3.5 && sweatness > 59.0)
            {Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMrain.jpg")).getImage();;

                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if(low<=44.0 && low>29.0 && gust > 0.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcold.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
              
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            else if(low<=29.0 && gust > 0.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMverycold.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl2.setIcon(imgIcon);
            }
            if (high>59.0 && gust > 0.0 && sweatness <= 19.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsunny.jpg")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if (high>59.0 && gust > 0.0 && sweatness > 19.0 && sweatness <= 54.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsuncloud.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if(high>59.0 && gust > 2.0 && sweatness > 54.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMsunrain.jpg")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if(high>44.0 && high<=59.0 && gust > 0.5 && sweatness <= 29.0)
            {Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcloud.")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if(high>44.0 && high<=59.0 && gust > 2.0 && sweatness > 29.0 && sweatness <= 59.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcloudrain.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if(high>44.0 && high<=59.0 && gust > 3.5 && sweatness > 59.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMrain.jpg")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if(high<=44.0 && high>29.0 && gust > 0.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMcold.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }
            else if(high<=29.0 && gust > 0.0)
            {
                Image getImg = new ImageIcon(this.getClass().getResource("/Images/CMverycold.png")).getImage();;
// GIFL.setImageIcon
                //Cancel above statment
                Image frshUmage = getImg.getScaledInstance(jLbl1.getWidth(), jLbl1.getHeight(), Image.SCALE_SMOOTH);
                
                //appending the image
                ImageIcon imgIcon = new ImageIcon(frshUmage);
                
                //setting image as captured from the api
                jLbl3.setIcon(imgIcon);
            }

        }
        catch (IOException e) {
            //e.printStackTrace();
            System.out.println(e.getMessage());
        }
        
        //further evaluation based on below details to find the exact match
        String fruit = (String) piComboBox.getSelectedItem();
        String place1 = (String) positionTextBox.getText();
        
        double num2 = Double.parseDouble(now_ClimTxt.getText());
        
        //cases to find the exact match
        if(place1.equalsIgnoreCase("Boston") && fruit.equals("orange") && num2 > 49.0 && num2 < 69.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                     
                    //Render notes on the text box
            Notes.setText("Conditions are good for oranges. Use fertilizers for the good results");
                    Font font = new Font ("Conditions are good for Oranges",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("orange") && num2 <= 49.0 || num2 >= 69.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions are bad to grow orange. Please wait");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("mango") && num2 > 11.0 && num2 < 69.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for Mango. Use vermicompost for the better results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("mango") && num2 <= 11.0 || num2 >= 69.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions are not good for Mango. Please wait until conditions improves");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("banana") && num2 > 24.0 && num2 < 79.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for banana. Use fertilizers for the best results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("banana") && num2 <= 24.0 || num2 >= 79.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions not good for Banana. Please wait for better conditions");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("sugarcane") && num2 > 29.0 && num2 < 79.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for sugarcane and use vermicompost for the better results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };           Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("sugarcane") && num2 <= 29.0 || num2 >= 79.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions not good for sugarcane. Kindly wait for better climate. ");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("cherry") && num2 > 35.0 && num2 < 79.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                //JOptionPane.showMessageDialog(null, "Perfect conditions to grow tomatoes and use PestA for the best results");
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for Cherry. Use fertilizer for the best results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("cherry") && num2 <= 35.0 || num2 >= 79.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions are not good for Cherry. Kindly wait for better climate ");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("apple") && num2 > 29.0 && num2 < 69.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                //JOptionPane.showMessageDialog(null, "Perfect conditions to grow tomatoes and use PestA for the best results");
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for apple. Use fertilizers for the best results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };           Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("apple") && num2 <= 29.0 || num2 >= 69.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions not good for apple. Kindly wait for better climate ");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("watermelon") && num2 > 19.0 && num2 < 74.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                //JOptionPane.showMessageDialog(null, "Perfect conditions to grow tomatoes and use PestA for the best results");
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for watermelon and use vermicompost for the best results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("watermelon") && num2 <= 19.0 || num2 >= 74.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions not good for watermelon growth. Kindly wait.");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("kiwi") && num2 > 49.0 && num2 < 79.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                //JOptionPane.showMessageDialog(null, "Perfect conditions to grow tomatoes and use PestA for the best results");
                     
                    //Render notes on the text box
            Notes.setText("Best conditions for Kiwi. Use vermicompost for the best results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("kiwi") && num2 <= 49.0 || num2 >= 79.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                 
                    //Render notes on the text box
            Notes.setText("Conditions are not good for Kiwi. Kindly wait.");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
              Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("melon") && num2 > 19.0 && num2 < 69.0 ) {
            
            //giving delay for work in process
            int pause = 3111; //ms
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                //JOptionPane.showMessageDialog(null, "Perfect conditions to grow tomatoes and use PestA for the best results");
                     
                    //Render notes on the text box
            Notes.setText("Best conditions to grow melon and use pesticides for the best results");
                    Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
      }
  };            Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        } 
        //cases to find the exact match
        else if(place1.equalsIgnoreCase("Boston")  && fruit.equals("melon") && num2 <= 19.0 || num2 >= 69.0 ) {
            JOptionPane.showMessageDialog(null, "Alert!");
            
            //giving delay for work in process
            int pause = 2111; //ms
            
            ActionListener tskPlayer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    
                    //Render notes on the text box
            Notes.setText("Conditions are not good for Melow. Kindly wait for good climate ");
            Font font = new Font ("",Font.BOLD,21);
            Notes.setFont(font);
        } 
        };            
                Timer tme = new Timer(pause, tskPlayer);
                //setting Kinal time for pause
                tme.setRepeats(false);
                tme.start();
        }
    }
    
    //release notes
    positionTextBox.setText("");
  
    }//GEN-LAST:event_chkClimateActionPerformed

    private void piComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piComboBoxActionPerformed

    }//GEN-LAST:event_piComboBoxActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
         userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        
        
        FarmerWorkAreaJPanel farmerWorkjp = (FarmerWorkAreaJPanel) component;
        farmerWorkjp.fillReqPITable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backActionPerformed

    private void jLbl1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jLbl1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jLbl1ComponentHidden

    private void tomorrowMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomorrowMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tomorrowMaxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Notes;
    private javax.swing.JButton back;
    private javax.swing.JButton chkClimate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLbl1;
    private javax.swing.JLabel jLbl10;
    private javax.swing.JLabel jLbl11;
    private javax.swing.JLabel jLbl13;
    private javax.swing.JLabel jLbl2;
    private javax.swing.JLabel jLbl28;
    private javax.swing.JLabel jLbl3;
    private javax.swing.JLabel jLbl39;
    private javax.swing.JLabel jLbl5;
    private javax.swing.JLabel jLbl6;
    private javax.swing.JLabel jLbl7;
    private javax.swing.JLabel jLlb4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField now_ClimTxt;
    private javax.swing.JComboBox piComboBox;
    private javax.swing.JTextField positionTextBox;
    private javax.swing.JTextField todayMax;
    private javax.swing.JTextField tomoPlusOneMax;
    private javax.swing.JTextField tomoPlusOne_ClimTxt;
    private javax.swing.JTextField tomo_ClimTxt;
    private javax.swing.JTextField tomorrowMax;
    // End of variables declaration//GEN-END:variables

    private void populateCombo() {
        piComboBox.addItem("");
        piComboBox.addItem("orange");
        piComboBox.addItem("mango");
        piComboBox.addItem("banana");
        piComboBox.addItem("sugarcane");
        piComboBox.addItem("cherry");
        piComboBox.addItem("apple");
        piComboBox.addItem("watermelon");
        piComboBox.addItem("kiwi");
        piComboBox.addItem("melon");
  }
}