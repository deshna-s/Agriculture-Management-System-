
package UI.FarmerRole;

import Model.EcoSys;

import Model.Enterprise.Enterprise;
import Model.Enterprise.FoodDeptEnt;
import Model.Yield.Yield;
import Model.Organization.OrgFarmer;
import Model.Organization.Organization;
import Model.Organization.OrgManagement;
import Model.Yield.YieldDir;
import Model.PrimaryItemReview.PrimaryItemReview;
import Model.PrimaryItemReview.PrimaryItemReviewDir;
import Model.UserAccount.UserAccount;
import Model.WorkQueue.YieldRequest;
import Model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @Author Deshna, Dhir, Prasad, Anisha
 */
public class FarmerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSys business;
    private UserAccount userAccount;
    private OrgFarmer farmerOrganization;
    private FoodDeptEnt enterprise;
    private YieldDir produceDirectory;
    private PrimaryItemReviewDir rmrDirectory;
    private ButtonGroup qualitybg = new ButtonGroup();
    private ButtonGroup shelfbg = new ButtonGroup();
    
    /**
     * Creates new form FarmerWorkAreaJPanel
     */

    public FarmerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise ,EcoSys business,YieldDir produceDirectory,PrimaryItemReviewDir rmrDirectory) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.farmerOrganization = (OrgFarmer)organization;
        this.enterprise = (FoodDeptEnt)enterprise;
        this.produceDirectory = produceDirectory;
        this.rmrDirectory = rmrDirectory;
        System.out.println("farmer panel produce directory"+ produceDirectory);
        populateTable();
        fillReqPITable();
        populateCropTable();
        populatermCombo();
        qualitygroupbutton();
        shelfgroupbutton();
 
    }
     private void qualitygroupbutton() {
//        qualitybg.add(qexRadioButton);
//        qualitybg.add(qvgRadioButton);
//        qualitybg.add(qgRadioButton);
//        qualitybg.add(qaRadioButton);
//        qualitybg.add(qpRadioButton);
    }
    
     private void shelfgroupbutton() {
//        shelfbg.add(sleRadioButton);
//        shelfbg.add(svgRadioButton);
//        shelfbg.add(sgRadioButton);
//        shelfbg.add(saRadioButton);
//        shelfbg.add(spRadioButton);
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : farmerOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[8];
            row[0] = request;
            row[1] = request.getSender().getEmp().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmp().getName();
            row[3] = request.getStatus();
            row[4] = request.getHarvestQty();
            model.addRow(row);
            
        }
    }
    
    public void populateCropTable(){
        
       DefaultTableModel model = (DefaultTableModel)produceTable.getModel();
        
        model.setRowCount(0);
        
        for(Yield produce : produceDirectory.getYieldList()){
            Object[] row = new Object[8];
            row[0] = produce;
            row[1] = produce.getHarvestQnty();
            row[2] = produce.getHarvestCost();
            row[3] = produce.getFarmerName();
            model.addRow(row);
        }
    }

        void fillReqPITable() {
        DefaultTableModel model = (DefaultTableModel) requestRMjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[8];
            row[0] = request.getMessage();
            row[1] = request.getSender();
            row[2] = request.getReceiver();
            String result = ((YieldRequest) request).getTestingOutput();
            row[3] = result == null ? "Waiting" : result;
            row[4] = request.getPrimItemQty();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        produceTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cropNameTextField = new javax.swing.JTextField();
        quantityTextField = new javax.swing.JTextField();
        priceTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        requestRMjTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        weatherButton = new javax.swing.JButton();
        addCropButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        reviewSupplyButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Crop Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 710, 96));

        assignJButton.setBackground(new java.awt.Color(0, 204, 0));
        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 90, 229, -1));

        processJButton.setBackground(new java.awt.Color(0, 204, 0));
        processJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 130, 229, 40));

        produceTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        produceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Crop Name", "Quantity", "Price", "Farmer"
            }
        ));
        jScrollPane2.setViewportView(produceTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 710, 98));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Crop Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, 30));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Quantity");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, 124, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Price");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 124, 40));

        cropNameTextField.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(cropNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 150, -1));

        quantityTextField.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        quantityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantityTextFieldKeyTyped(evt);
            }
        });
        add(quantityTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 320, 140, -1));

        priceTextField.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(priceTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 370, 150, -1));

        requestRMjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        requestRMjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Raw material Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(requestRMjTable);
        if (requestRMjTable.getColumnModel().getColumnCount() > 0) {
            requestRMjTable.getColumnModel().getColumn(0).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(1).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(2).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(3).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, 710, 90));

        requestTestJButton.setBackground(new java.awt.Color(0, 204, 0));
        requestTestJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        requestTestJButton.setText("Request Raw Material");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 430, 230, -1));

        weatherButton.setBackground(new java.awt.Color(0, 204, 0));
        weatherButton.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        weatherButton.setText("Farmer Assistance");
        weatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherButtonActionPerformed(evt);
            }
        });
        add(weatherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 310, 250, 40));

        addCropButton.setBackground(new java.awt.Color(0, 204, 0));
        addCropButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addCropButton.setText("Add Produce");
        addCropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCropButtonActionPerformed(evt);
            }
        });
        add(addCropButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 280, -1));

        submitButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        submitButton.setText("Submit Review");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        add(submitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 620, 232, -1));

        reviewSupplyButton.setBackground(new java.awt.Color(0, 204, 0));
        reviewSupplyButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        reviewSupplyButton.setText("Inspect Raw Material");
        reviewSupplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewSupplyButtonActionPerformed(evt);
            }
        });
        add(reviewSupplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 490, -1, 31));

        jLabel8.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Farmer Work Place");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 450, 50));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setText("Raw Material Details");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 162, -1));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel11.setText("Produce Details");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel12.setText("Produce Transaction Details");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel13.setBackground(new java.awt.Color(102, 255, 102));
        jLabel13.setForeground(new java.awt.Color(153, 255, 153));
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 2020, 1350));
    }// </editor-fold>//GEN-END:initComponents
    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
       // String selectedRM = (String)rmComboBox.getSelectedItem();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
        }

        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        String cropName = workRequestJTable.getModel().getValueAt(selectedRow, 0).toString();
        int cropQty = Integer.parseInt((String.valueOf(workRequestJTable.getModel().getValueAt(selectedRow, 4))));
        populateTable();
        if(cropName.equalsIgnoreCase("rice")) if(cropName.equalsIgnoreCase("tomato")){
            JOptionPane.showMessageDialog(null, "The amount of pesticides required for rice of quality pest A is" + (cropQty*2) + 
                    "The amount of pesticides required for rice of quality pest B is" + (cropQty/2)+ "The amount of pesticides required for rice of quality pest A is" +(cropQty*1.5));
        }
        
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
        else
        {
        YieldRequest request = (YieldRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
        request.setStatus("Processing");
        
        ProcessYieldReqJPanel processWorkRequestJPanel = new ProcessYieldReqJPanel(userProcessContainer, request);
        userProcessContainer.add("ProcessProduceJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestProduceJPanel", new ReqPrimaryItemJPanel(userProcessContainer, userAccount, enterprise,produceDirectory));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void weatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("WeatherInformationJPanel", new FarmingAssistanceJPanel (userProcessContainer));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_weatherButtonActionPerformed

    private void addCropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCropButtonActionPerformed
        // TODO add your handling code here:
        try 
        {
        if(cropNameTextField.getText().equals("") || quantityTextField.getText().equals("") || priceTextField.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Please fill all the details before proceeding");
         else if (checkIfCropExists(cropNameTextField.getText()))
        {
            Yield produce =  produceDirectory.addYield();
            produce.setHarvestName(cropNameTextField.getText());
            produce.setHarvestCost(Double.parseDouble(priceTextField.getText()));
            produce.setHarvestQnty(Integer.parseInt(quantityTextField.getText()));
            produce.setFarmerName(userAccount.getuName());
            populateCropTable();
        }
        else {
             String tempName = null;   
             int cropQty = Integer.parseInt(quantityTextField.getText());
             int i = 0;
             String cropName = cropNameTextField.getText();
             for(int j = 0; j <produceTable.getRowCount(); j++){
             tempName = produceTable.getModel().getValueAt(j, i).toString();
             
             if(tempName.equalsIgnoreCase(cropName)){
                i++;
               
                cropQty = Integer.parseInt((String.valueOf(produceTable.getModel().getValueAt(j, i)))) + cropQty;
                
                for (Yield prod : produceDirectory.getYieldList())
                {
                    if (prod.getHarvestName().equalsIgnoreCase(cropName))
                     prod.setHarvestQnty(cropQty);
                }
                break;
            }
        }
             populateCropTable();
            }
        }
        catch(NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null,"Please enter a number in Quantity  and price");
            }
        cropNameTextField.setText("");
        quantityTextField.setText("");
        priceTextField.setText("");
        
    }//GEN-LAST:event_addCropButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = requestRMjTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
            
        }

        String status = requestRMjTable.getValueAt(selectedRow, 3).toString();
        String supplyName = requestRMjTable.getValueAt(selectedRow, 0).toString();
        String supplierName = requestRMjTable.getValueAt(selectedRow, 2).toString();

        if(status.equalsIgnoreCase("Completed") || status.equalsIgnoreCase("done")  || status.equalsIgnoreCase("Request fulfilled")){
            PrimaryItemReview rmr = rmrDirectory.addRawMaterialReview();
            rmr.setStockName(supplyName);
           rmr.setDistributorName(supplierName);

//            String quality = null;
//            if(qexRadioButton.isSelected())
//            quality = "Excellent";
//            else if (qvgRadioButton.isSelected())
//            quality = "Very Good";
//            else if (qgRadioButton.isSelected())
//            quality = "Good";
//            else if (qaRadioButton.isSelected())
//            quality = "Average";
//            else if(qpRadioButton.isSelected())
//            quality = "Poor";

            String shelfLife = null;

//            if(sleRadioButton.isSelected())
//            shelfLife = "Excellent";
//            else if (svgRadioButton.isSelected())
//            shelfLife = "Very Good";
//            else if (sgRadioButton.isSelected())
//            shelfLife = "Good";
//            else if (saRadioButton.isSelected())
//            shelfLife = "Average";
//            else if(spRadioButton.isSelected())
//            shelfLife = "Poor";

//            rmr.setYieldQlty(quality);
            rmr.setYieldStorageLife(shelfLife);
//            rmr.setExtraRevirws(additionalreviewsTextArea.getText());
        }

//        qexRadioButton.setEnabled(false);
//        qvgRadioButton.setEnabled(false);
//        qgRadioButton.setEnabled(false);
//        qaRadioButton.setEnabled(false);
//        qpRadioButton.setEnabled(false);

//        sleRadioButton.setEnabled(false);
//        svgRadioButton.setEnabled(false);
//        sgRadioButton.setEnabled(false);
//        saRadioButton.setEnabled(false);
//        spRadioButton.setEnabled(false);
//
//        additionalreviewsTextArea.setEnabled(false);

        qualitybg.clearSelection();
        shelfbg.clearSelection();

//        additionalreviewsTextArea.setText(" ");
    }//GEN-LAST:event_submitButtonActionPerformed

    private void reviewSupplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewSupplyButtonActionPerformed
        // TODO add your handling code here:
         int selectedRow = requestRMjTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
            
        }
       
       String status = requestRMjTable.getValueAt(selectedRow, 3).toString();
       
       if(status.equalsIgnoreCase("Request fulfilled") || status.equalsIgnoreCase("Completed") || status.equalsIgnoreCase("done")){
      
//            qexRadioButton.setEnabled(true);
//            qvgRadioButton.setEnabled(true);
//            qgRadioButton.setEnabled(true);
//            qaRadioButton.setEnabled(true);
//            qpRadioButton.setEnabled(true);
//
//            sleRadioButton.setEnabled(true);
//            svgRadioButton.setEnabled(true);
//            sgRadioButton.setEnabled(true);
//            saRadioButton.setEnabled(true);
//            spRadioButton.setEnabled(true);
//            
//            additionalreviewsTextArea.setEnabled(true);
        
       }
       else{
           JOptionPane.showMessageDialog(null, "Request not fulfilled");
       }
        
    }//GEN-LAST:event_reviewSupplyButtonActionPerformed

    private void quantityTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTextFieldKeyTyped
        char vchar = evt.getKeyChar();
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE)){
        getToolkit().beep();
        evt.consume();
    } 
    }//GEN-LAST:event_quantityTextFieldKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCropButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JTextField cropNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable produceTable;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JTable requestRMjTable;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JButton reviewSupplyButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton weatherButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    private boolean checkIfCropExists(String text) {
         boolean flag = true;
        for (Yield produce: produceDirectory.getYieldList()){
            String temp = produce.getHarvestName();
            if(temp == null)
            {   
                break;
            }
            else if (temp.equalsIgnoreCase(text))
            {
                flag = false;
                break;
            }
                else
                flag = true;
        } 
        
        return flag;
    }

    private void populatermCombo() {
        /*rmComboBox.addItem("Pest A");
        rmComboBox.addItem("Pest B");
        rmComboBox.addItem("Pest C");
*/

    }

  
}