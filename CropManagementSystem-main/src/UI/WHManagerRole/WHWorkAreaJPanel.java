
package UI.WHManagerRole;

import UI.FarmerRole.*;
import Model.EcoSys;
import Model.Enterprise.Enterprise;
import Model.Enterprise.FoodDeptEnt;
import Model.Yield.Yield;
import Model.Organization.OrgFarmer;
import Model.Organization.Organization;
import Model.Organization.OrgWH;
import Model.Yield.YieldDir;
import Model.UserAccount.UserAccount;
import Model.WorkQueue.YieldRequest;
import Model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @Author Deshna, Dhir, Prasad, Anisha
 */
public class WHWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSys business;
    private UserAccount userAccount;
    
    //Declaring variables for WH usage
    private OrgWH whOrg;
    private YieldDir yieldDir;
    private FoodDeptEnt enterprise;
   public static boolean flag = false;
    /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
     
    public WHWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise, EcoSys business,YieldDir yeildDir) {
     initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.enterprise = (FoodDeptEnt)enterprise;
        this.whOrg = (OrgWH)organization;
        this.yieldDir = yeildDir;
        populateTable();
        populateCropTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)wrkReqJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest req : whOrg.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = req;
            row[1] = req.getSender().getEmp().getName();
            row[2] = req.getReceiver() == null ? null : req.getReceiver().getEmp().getName();
            
            //values in text box
            //values
            row[3] = req.getStatus();
            row[4] = req.getHarvestQty();
            model.addRow(row);
        }
    }
       /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
    public void populateCropTable(){
         DefaultTableModel model = (DefaultTableModel)yieldTable.getModel();
        
        model.setRowCount(0);
        
        for(Yield produce : yieldDir.getYieldList()){
            Object[] row = new Object[5];
            row[0] = produce;
            row[1] = produce.getHarvestQnty();
            //values in the text field WH
            
               /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
            row[2] = produce.getHarvestCost();
            row[3] = produce.getFarmerName();
            model.addRow(row);
        }
    }
   
   /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        wrkReqJTable = new javax.swing.JTable();
        associateJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        yieldTable = new javax.swing.JTable();
        jLabel122 = new javax.swing.JLabel();
        jLabel342 = new javax.swing.JLabel();
        jLabel332 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        wrkReqJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        wrkReqJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Crop Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(wrkReqJTable);
        if (wrkReqJTable.getColumnModel().getColumnCount() > 0) {
            wrkReqJTable.getColumnModel().getColumn(0).setResizable(false);
            wrkReqJTable.getColumnModel().getColumn(1).setResizable(false);
            wrkReqJTable.getColumnModel().getColumn(2).setResizable(false);
            wrkReqJTable.getColumnModel().getColumn(3).setResizable(false);
            wrkReqJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 726, 122));

        associateJButton.setBackground(new java.awt.Color(255, 102, 102));
        associateJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        associateJButton.setText("Assign to me");
        associateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                associateJButtonActionPerformed(evt);
            }
        });
        add(associateJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, 230, -1));

        processJButton.setBackground(new java.awt.Color(255, 102, 102));
        processJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 320, 170, -1));

        yieldTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        yieldTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Crop Name", "Quantity", "Price", "Farmer", "Raw Material"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(yieldTable);
        if (yieldTable.getColumnModel().getColumnCount() > 0) {
            yieldTable.getColumnModel().getColumn(0).setResizable(false);
            yieldTable.getColumnModel().getColumn(1).setResizable(false);
            yieldTable.getColumnModel().getColumn(2).setResizable(false);
            yieldTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 430, 726, 170));

        jLabel122.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLabel122.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel122.setText("Warehouse Manager");
        add(jLabel122, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 390, 60));

        jLabel342.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel342.setText("Yield Request");
        add(jLabel342, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, -1, -1));

        jLabel332.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel332.setText("Yield Inventory");
        add(jLabel332, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, -1, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/UIAdministrativeRole.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -290, 990, 1310));
    }// </editor-fold>//GEN-END:initComponents

    private void associateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_associateJButtonActionPerformed

        int selectedRow = wrkReqJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Kindly select a record!");
        }
        else{
            WorkRequest request = (WorkRequest)wrkReqJTable.getValueAt(selectedRow, 0);
            String customer = wrkReqJTable.getModel().getValueAt(selectedRow, 1).toString();
            String cultivateName = wrkReqJTable.getModel().getValueAt(selectedRow, 0).toString();
            int cropQty = Integer.parseInt((String.valueOf(wrkReqJTable.getModel().getValueAt(selectedRow, 4))));

            
               /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
            int i =0;
            int cultivateQntyYield = 0;
            String temp1_Name1 = null;
            //fucntion
            for(int j1 = 0; j1 <yieldTable.getRowCount(); j1++)
            {
             temp1_Name1 = yieldTable.getModel().getValueAt(j1, i).toString();
             //System.out.println(tempName);
                if(temp1_Name1.equals(cultivateName)){
                i++;
               
                cultivateQntyYield = Integer.parseInt((String.valueOf(yieldTable.getModel().getValueAt(j1, i))));
                break;
                }
            }
            
            if (cultivateQntyYield == 0)
        {
            JOptionPane.showMessageDialog(null,"Unable to assign this job. Kindly go to Farmer");
            
            //above issues in process
            //working
            request.setStatus("Forwarded to Farmer");
            flag = true;
            processJButton.setEnabled(false);
        }
            else{
            
            if (temp1_Name1.equals(cultivateName))
            {
                if (cropQty <= cultivateQntyYield)
                    {
                        
                        request.setReceiver(userAccount);
                        request.setStatus("Pending");
                        
                           /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
                        //harvest in pending state
                        String sender = String.valueOf(request.getSender());
                        for(Yield produce : yieldDir.getYieldList()){
                            if (temp1_Name1.equals((String)produce.getHarvestName()) && sender.equals(customer))
                            {
                                //harvest in process
                                produce.setHarvestQnty(cultivateQntyYield - cropQty);
                                request.setHarvestQty(0);
                            }
                            populateCropTable();
                            populateTable();
                        }  
 
                    }
                else if (cropQty > cultivateQntyYield)
                {
                    
                    request.setReceiver(userAccount);
                    request.setStatus("Forwarded to Farmer");
                    
                    //harvest in process
                    request.setHarvestQty(cropQty - cultivateQntyYield);
                    String sender = String.valueOf(request.getSender());
                    for(Yield produce : yieldDir.getYieldList()){
                        //harvesting the crop
                        //yield in process
                    if ((temp1_Name1.equals((String)produce.getHarvestName())) &&  sender.equals(customer))
                    {
                        produce.setHarvestQnty(0);
                        request.setHarvestQty(cropQty - cultivateQntyYield);
                        flag = true;
                    }
                    
                    populateCropTable();
                    populateTable();
                    }  
                }
            
            }
            }
        }
       
    }//GEN-LAST:event_associateJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = wrkReqJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Kindly select a record!");
        }
        
        YieldRequest request = (YieldRequest)wrkReqJTable.getValueAt(selectedRow, 0);
     
        request.setStatus("Under Process");
        //under process with the cropping
        ProcessReqJPanel processWorkRequestJPanel = new ProcessReqJPanel(userProcessContainer, request);
        userProcessContainer.add("ProcessProduceJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
           /**
     * 
     * /*submit the inputs and wait the output

creates new panel for new role in the organization

data to be defined.

data passed in the function.

*/
    }//GEN-LAST:event_processJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton associateJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel332;
    private javax.swing.JLabel jLabel342;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable wrkReqJTable;
    private javax.swing.JTable yieldTable;
    // End of variables declaration//GEN-END:variables
}
